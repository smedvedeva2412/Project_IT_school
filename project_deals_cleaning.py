# -*- coding: utf-8 -*-
"""Project_Deals_Cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1diyt_YN_HheCzlJopoULjW_c7h1CpjZr

time_deltas = pd.to_timedelta(hours, unit='h') + pd.to_timedelta(minutes, unit='m')

# Convert timedelta to datetime
datetime_series = pd.to_datetime(time_deltas)
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

deals = pd.read_excel('Deals (Done).xlsx', dtype={'Id': 'Int64', 'Contact Name': 'Int64', 'Initial Amount Paid': 'str', 'Offer Total Amount': 'str'})
deals.head()

deals.tail()

filtered_rows = deals[deals['Id'].isnull()]
filtered_rows

deals.dropna(subset=['Id'], inplace=True)

deals.duplicated()

num_duplicates = deals.duplicated().sum()
num_duplicates

deals.info()

(deals.isnull().sum()/(len(deals)))*100  #% пропущенных значений

"""# ***CONTACT NAME***
есть совпадения по имени контакта. Пустые 2 значения заполнила нулями
"""

deals['Contact Name'] = deals['Contact Name'].fillna(0)
deals['Contact Name']

deals['Contact Name'].duplicated() # контактных лиц по сделке много совпадений -

duplicates_count = deals['Id'].duplicated().sum()
print(f'Количество дубликатов: {duplicates_count}')

deals['Id']

deals['Id'].unique()

"""# **Created Time - нет выбросов, время преобразовала в формат день, месяц год**"""

deals['Created Time'] = pd.to_datetime(deals['Created Time'].str.split().str[0], format='%d.%m.%Y')
deals['Created Time'] #перевела столбец в дата тип и убрала сремя

deals['Created Time'].describe() #нет выбросов

deals.duplicated()

duplicates = deals.duplicated(keep=False)
only_duplicates = deals[duplicates]
print(only_duplicates) #вывела только дубликаты

deals.drop_duplicates(subset=['Id'], keep='first', inplace=True)

duplicates = deals.duplicated(keep=False)
only_duplicates = deals[duplicates]
print(only_duplicates)

"""# ***SLA - перевела в числовой формат. Рассматриваю как время от получения лида до созвона с ним***"""

deals['SLA'] = deals['SLA'].astype(str)

deals['SLA'].unique()

deals['SLA'] = deals['SLA'].replace({"null": np.nan})
deals['SLA'] = pd.to_timedelta(deals['SLA'])
deals['SLA']

len(deals['SLA'])

# deals['SLA'].median()
# deals['SLA'] = deals['SLA'].fillna(deals['SLA'].median())

deals.describe()

len(deals)

deals['SLA'] = deals['SLA'].dt.total_seconds() / 3600

print(deals['SLA'].describe())

deals['SLA']

"""# **Выявляем выбросы**"""

Q1 = deals['SLA'].quantile(0.25)
Q3 = deals['SLA'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
filtered_deals = deals[(deals['SLA'] >= lower_bound) & (deals['SLA'] <= upper_bound)]
print(filtered_deals['SLA'].describe())

deals['SLA'] = deals['SLA'].fillna(deals['SLA'].median())

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.boxplot(deals['SLA'])
plt.title('Box plot of SLA')
plt.ylabel('SLA values')
plt.show()

len(deals)

sns.boxplot(x='Product', y='SLA', data=deals)
plt.show()



"""# **  **QUALITY - убрала буквы.** Заполнила пустые NO - не определенное качество. Разделила по дефису строку, удалила старый и ненужный столбец с буквой. Столбцец с категорией F - преобразовала и назвала SPECIAL**

---


"""

deals['Quality'] = deals['Quality'].replace('F', 'F - Special')
deals['Quality'] = deals['Quality'].fillna('No')
deals['Quality'] = deals['Quality'].astype(str)
len(deals)

deals['Quality'].unique()

# Преобразование необработанных данных - разделение столбца качество на букву и прилегающие слова
deals['Quality1'] = deals['Quality'].str.split(r'\s*-\s*').str[0].str.strip()

len(deals)

deals['Quality2'] = deals['Quality'].str.split(r'\s*-\s*').str[1].fillna('No').str.strip()
deals.drop('Quality', axis=1, inplace=True)
len(deals)
deals.drop('Quality1', axis=1, inplace=True)
deals.head()

deals['Quality2'].unique()

deals['Quality2'].isna().sum()

deals['Quality2']

deals['Stage'].unique()

"""**Удалила пустую строку**"""

missing_stage_rows = deals[deals['Stage'].isna()]
missing_stage_rows
del missing_stage_rows

"""# **Отфильтровала сделки по двум условиям**"""

filtered_deals = deals[(deals['Stage'] == 'Lost') & (deals['Lost Reason'].isnull())]
filtered_deals

"""# **ЗАМЕНИЛА ПРОПУЩЕННЫЕ ЗНАЧЕНИЯ В СТОЛБЦЕ LOST REASON ЗНАЧЕНИЕМ "NO REASONS" **"""

deals['Lost Reason'] = deals['Lost Reason'].fillna('No reason')
deals['Lost Reason']

deals['Lost Reason'].isna().sum()

deals['Stage'].isna().sum()

deals['Campaign'] = deals['Campaign'].fillna('No campaign')

deals['Campaign'].unique()

deals['Content'] = deals['Content'].fillna('Unknown')
deals['Term'] = deals['Term'].fillna('Unknown')
deals['Source'] = deals['Source'].fillna('Unknown')

deals['Payment Type'] = deals['Payment Type'].fillna('No info')
deals['Source'] = deals['Source'].fillna('Unknown')
deals['Education Type'] = deals['Education Type'].fillna('No info')
deals['Months of study'] = deals['Months of study'].fillna(0)

(deals.isnull().sum()/(len(deals)))*100

deals['Closing Date'] = pd.to_datetime(deals['Closing Date'].str.split().str[0], format='%d.%m.%Y')
deals['Closing Date']

"""# **Closing Date с пустыми значениями заполнила несуществующей датой: 01.01.2025 **"""

deals['Closing Date'] = deals['Closing Date'].fillna('01.01.2025')
deals['Closing Date']

deals['Closing Date'].describe()

"""# **COURSE Duration and Products**"""

deals['Product'].unique()

product_counts = deals['Product'].value_counts()
product_counts

deals.loc[(deals['Product'] == 'Web developer') & (deals['Course duration'] == 0), 'Course duration'] = 6
deals.loc[(deals['Product'] == 'UX/UI') & (deals['Course duration'] == 0), 'Course duration'] = 11
deals.loc[(deals['Product'] == 'Digital Marketing') & (deals['Course duration'] == 0), 'Course duration'] = 10

deals['Course duration']

deals['Course duration'] = deals['Course duration'].fillna(0)
deals['City'] = deals['City'].fillna('Unknown')
deals['City'] = deals['City'].replace('-', 'Unknown')



deals['Contact Name'] = deals['Contact Name'].fillna(0)
deals['Contact Name']

deals['Deal Owner Name'] = deals['Deal Owner Name'].fillna('Unspeicified')

deals['Product'] = deals['Product'].fillna('Not chosen')
deals['Course duration'] = deals['Course duration'].fillna(0)



"""## **Очистка и заполнение уровня немецого: Сначала все в верхний регистр, Удаляем все символы, кроме A1|A2|B1|Б1|Б2|B2|C1|C2, славянские Б приводим к латинским.

"""

deals['Level of Deutsch'] = deals['Level of Deutsch'].str.upper()

pattern = r"^(A1|A2|B1|Б1|Б2|B2|C1|C2)$"
deals['Level of Deutsch'] = deals['Level of Deutsch'].str.extract(pattern, expand=False)

deals['Level of Deutsch'].unique()

replace_levels = {'Б1': 'B1', 'Б2': 'B2'}
deals['Level of Deutsch'] = deals['Level of Deutsch'].replace(replace_levels)
deals['Level of Deutsch'].unique()

deals['Level of Deutsch'] = deals['Level of Deutsch'].fillna('Unknown')
deals['Level of Deutsch'].unique()

deals['Level of Deutsch']

valid_levels = ['A1', 'B1', 'C1', 'A2', 'B2', 'C2']
filtered_deals = deals[deals['Level of Deutsch'].isin(valid_levels)]
filtered_deals

"""# **Эти ужасные денежные столбцы!!!** Initial Amount я только убрала значок евро, предположив, что все в одной валюте."""

deals['Initial Amount Paid'].unique()

deals['Initial Amount Paid'] = np.where(deals['Initial Amount Paid'] == '€ 3.500,00', 3500, deals['Initial Amount Paid'])
deals['Initial Amount Paid'] = deals['Initial Amount Paid'].fillna('0').astype(str)
deals['Initial Amount Paid'] = deals['Initial Amount Paid'].str.replace(r'[^\d]', '', regex=True) #пытаюсь убрать все-все личшнее с 10й попытки, в данном случае все символы кроме цифр

deals['Initial Amount Paid'] = pd.to_numeric(deals['Initial Amount Paid'], errors='coerce')

deals['Initial Amount Paid'].unique()

deals['Offer Total Amount'].unique()

"""# **Пересчитала доллары к евро. Привела к одной валюте**"""

deals['Offer Total Amount'] = np.where(deals['Offer Total Amount'] == '€ 2.900,00', 2900, deals['Offer Total Amount'])
deals['Offer Total Amount'] = np.where(deals['Offer Total Amount'] == '€ 11398,00', 11398, deals['Offer Total Amount'])
deals['Offer Total Amount'] = deals['Offer Total Amount'].fillna('0').astype(str)
deals['Offer Total Amount'] = deals['Offer Total Amount'].str.replace(r'[^\d]', '', regex=True)

deals['Offer Total Amount'] = pd.to_numeric(deals['Offer Total Amount'], errors='coerce')

deals['Offer Total Amount'].unique()

deals['Offer Total Amount'] = np.where(
    (deals['Offer Total Amount'] > 0) &
    (deals['Offer Total Amount'] != 2900) &
    (deals['Offer Total Amount'] != 11398),
    (deals['Offer Total Amount'] * 1.04).astype(int),
    deals['Offer Total Amount']
)

"""# **УДАЛИТЬ ЯЧЕЙКИ НИЖЕ????. ВО-ПЕРВЫХ ОДИН И ТОТ ЖЕ КОНТАКТ НЕЙМ (КРОМЕ ОДНОГО ЗНАЧЕНИЯ). вО-ВТОРЫХ, ПОХОЖЕ НА ВЫБРОСЫ = ОШИБКИ**


---




"""

target = [1, 9]
filtered_deals = deals[deals['Initial Amount Paid'].isin(target)]
filtered_deals

target2 = [1]
filtered_deals2 = deals[deals['Offer Total Amount'].isin(target)]
filtered_deals2

index1 = deals[deals['Initial Amount Paid'].isin(target)].index
index2 = deals[deals['Offer Total Amount'].isin(target2)].index
deals = deals.drop(index=index1)

"""# **CONTACT NAME ДУБЛИКАТЫ?**
отсортировала по оплатам, где сначала проверила Тотал, потом Инишиал на оплату. Если нули, то удалила. Убрала дубликаты: оставляю строку с наибольшим 'Offer Total Amount' для каждого 'Contact Name'
"""

deals['Contact Name'].duplicated()
duplicates = deals[deals['Contact Name'].duplicated(keep=False)]
duplicates

deals_sorted = deals.sort_values(
    by=['Offer Total Amount', 'Initial Amount Paid'],
    ascending=[False, False]
)
deals_cleaned = deals_sorted.drop_duplicates(subset='Contact Name', keep='first')
deals_cleaned = deals_cleaned.reset_index(drop=True)
deals_cleaned

deals = deals_cleaned

deals['Contact Name'].duplicated()
duplicates = deals[deals['Contact Name'].duplicated(keep=False)]
duplicates

"""## **Убираю все ячейки, ведущие на тестовую страницу, без оплат и без рекламной кампании**"""

page_test = deals[(deals['Page'] == '/test')& (deals['Campaign'] == 'No campaign') & (deals['Initial Amount Paid'] == 0)]
page_test

filtered_rows = (deals['Page'] != '/test') | (deals['Campaign'] != 'No campaign') | (deals['Initial Amount Paid'] != 0)
deals = deals[filtered_rows].reset_index(drop=True)
deals

page_test_en = deals[(deals['Page'] == '/eng/test')& (deals['Campaign'] == 'No campaign') & (deals['Initial Amount Paid'] == 0)]
page_test_en

"""# **Course duration , который равен 0 и была осуществлена оплата выставляю длительность курса месяц, где Initial Amount Paid = 500 и 1000, где 2000 - меняю на 4 месяца по аналогии с 500**

"""

zero_duration = deals[(deals['Course duration'] == 0) & (deals['Initial Amount Paid'] > 0)]
zero_duration

deals.loc[(deals['Course duration'] == 0) & (deals['Initial Amount Paid'] == 500), 'Course duration'] = 1
deals.loc[(deals['Course duration'] == 0) & (deals['Initial Amount Paid'] == 1000), 'Course duration'] = 1
deals.loc[(deals['Course duration'] == 0) & (deals['Initial Amount Paid'] == 2000), 'Course duration'] = 4

deals['Course duration'] = deals['Course duration'].astype(int)

"""# **Где отсутствуют платежи и нет РК - удаляю**"""

nopayment_no_compaign = deals[(deals['Campaign'] == 'No campaign') & (deals['Initial Amount Paid'] == 0) & (deals['Offer Total Amount'] == 0)]
nopayment_no_compaign

filtered_rows_to_delete = (deals['Campaign'] == 'No campaign') & (deals['Initial Amount Paid'] == 0) & (deals['Offer Total Amount'] == 0)
deals_cleaned = deals[~filtered_rows_to_delete].reset_index(drop=True)
deals_cleaned
deals = deals_cleaned

nopayment_no_compaign2 = deals[(deals['Campaign'] == 'No campaign') & (deals['Initial Amount Paid'] == 0)]
nopayment_no_compaign

filtered_rows_to_delete = (deals['Campaign'] == 'No campaign') & (deals['Initial Amount Paid'] == 0)
deals_cleaned = deals[~filtered_rows_to_delete].reset_index(drop=True)
deals_cleaned
deals = deals_cleaned
deals

"""# **ПРОВЕРЯЮ ПЕРЕПУТАННОЕ ЗАПОЛНЕНИЕ ОПЛАТ**
меняю местами оффер и первую оплату там где оффер не равен 0
"""

payment_mist = deals[(deals['Offer Total Amount']) < (deals['Initial Amount Paid'])]
payment_mist

condition = (deals['Offer Total Amount'] < deals['Initial Amount Paid']) & (deals['Offer Total Amount'] != 0)
deals.loc[condition, ['Offer Total Amount', 'Initial Amount Paid']] = deals.loc[condition, ['Initial Amount Paid', 'Offer Total Amount']].values
deals

deals.loc[(deals['Course duration'] == 0) & (deals['Initial Amount Paid'] == 500), 'Course duration'] = 6
deals.loc[(deals['Course duration'] == 0) & (deals['Initial Amount Paid'] == 1000), 'Course duration'] = 6
deals.loc[(deals['Course duration'] == 0) & (deals['Initial Amount Paid'] == 2000), 'Course duration'] = 11
deals.loc[(deals['Course duration'] == 1),'Course duration'] = 11

"""# **CITY. Обнаружила схожие строки** Проверяю сколько таких и удаляю дубли

"""

duplicate_rows = deals[deals.duplicated(subset=['City', 'Payment Type', 'Term', 'Campaign', 'Stage', 'Content', 'Deal Owner Name', 'Quality2', 'Stage', 'Lost Reason', 'Created Time', 'Closing Date', 'SLA', 'Page', 'Initial Amount Paid', 'Offer Total Amount' ], keep=False)]

duplicate_rows

deals_cleaned = deals.drop_duplicates(subset=['City', 'Payment Type', 'Term', 'Campaign', 'Stage', 'Content', 'Deal Owner Name', 'Quality2', 'Lost Reason', 'Created Time', 'Closing Date', 'SLA', 'Page', 'Initial Amount Paid', 'Offer Total Amount'],
              keep='first', inplace=True)

"""# **ЧИСТКА НАЗВАНИЯ ГОРОДА. Убираю полный адрес и пояснения в скобках.**
столкнулась с тем, что есть клиент, который зарегистрировался на 2х курсах. И оплата прошла. все одинаково. Предположила, что он обуччается на обоих курсах
"""

address_del = deals['City'].replace({'Karl-Liebknecht str. 24, Hildburghausen, Thüringen':'Thüringen','Halle (Saale)': 'Halle', 'Vor Ebersbach 1, 77761 Schiltach': 'Shiltach',
          'Poland , Gdansk , Al. Grunwaldzka 7, ap. 1a': 'Gdańsk'})
deals['City'] =  address_del

"""# **МЕНЯЮ ЗНАЧЕНИЯ В СТОЛБЦЕ PAYMENT TYPE С УКАЗАННЫМИ НИЖЕ УСЛОВИЯМИ**"""

deals['Payment Type'] = np.where(
    (deals['Payment Type'] == 'Reservation'), deals['Payment Type'],
    np.where(
        (deals['Offer Total Amount'] == 0) & (deals['Initial Amount Paid'] == 0), 'No Payments',
        np.where(
            (deals['Initial Amount Paid'] == 0), 'No Payments',
            np.where(
                ((deals['Offer Total Amount'] >= deals['Initial Amount Paid']) &
                 (deals['Offer Total Amount'] - deals['Initial Amount Paid'] > 200)) |
                ((deals['Offer Total Amount'] < deals['Initial Amount Paid']) &
                 (deals['Initial Amount Paid'] - deals['Offer Total Amount'] > 200)),
                'Recurring Payments',
                'One Payment'
            )
        )
    )
)

# deals['Months of study'] = deals['Months of study_deals'].astype(int)
# deals = deals.drop('Months of study_deals', axis=1)

deals.info()

deals['Stage'] = deals['Stage'].astype('category')
deals['Product'] = deals['Product'].astype('category')
deals['Lost Reason'] = deals['Lost Reason'].astype('category')
deals['Education Type'] = deals['Education Type'].astype('category')
# deals['City'] = deals['City'].astype('category')
deals['Level of Deutsch'] = deals['Level of Deutsch'].astype('category')
deals['Quality2'] = deals['Quality2'].astype('category')
deals.info()

"""# **ПРОВЕРКА ОШИБКИ В ДАТАХ.**
Где дельта отрицательная, создаем маску и меняем местами даты (я предположила, что это ошибочное заполнение)
"""

check_time = deals['Closing Date'] - deals['Created Time']
negative_check_time = deals[check_time < pd.Timedelta(0)]
negative_check_time

mask_check = check_time < pd.Timedelta(0)
deals.loc[mask_check, ['Closing Date', 'Created Time']] = deals.loc[mask_check, ['Created Time', 'Closing Date']]
deals[mask_check]

mistake = deals['Closing Date'] < deals['Created Time']
mistake.unique()
mistakes = deals[deals['Closing Date'] < deals['Created Time']]
mistakes

"""# **УДАЛИЛА ДВЕ СТРОКИ ВЫБРОСЫ С ОТСУТСТВИЕМ ИНФОРМАЦИИ, ОПЛАТЫ, В 2022 ГОДУ И ТЕ, ЧТО БЫЛИ СОЗДАНЫ В ЯНВАРЕ 24 И ЗАКРЫТЫ В ДЕКАБРЕ 24**"""

mistakes = deals[deals['Closing Date'] < deals['Created Time']]
deals.loc[mistakes.index, ['Closing Date', 'Created Time']] = deals.loc[mistakes.index, ['Created Time', 'Closing Date']].values

early_deals = deals[deals['Created Time'].dt.year == 2022]
early_deals
deals = deals.drop(early_deals.index)

filtered_deals = deals[
    (deals['Created Time'].dt.month == 1) &
    (deals['Created Time'].dt.year == 2024) &
    (deals['Closing Date'].dt.month == 12) &
    (deals['Closing Date'].dt.year == 2024)
]
filtered_deals
deals = deals.drop(filtered_deals.index)

deals['Closing Date'].info()

"""# **ЗАПОЛНЯЮ ПУСТЫЕ ЯЧЕЙКИ, ГДЕ НЕ УКАЗАНЫ МЕСЯЦЫ ОБУЧЕНИЯ. гРУППИРУЮ Initial and Offer И СЧИТАЮ СРЕДНЕЕ В ИХ ГРУППАХ**. Использую ф-ию cut, которая создает категории по группам"""

filtered_deals = deals[(deals['Initial Amount Paid'] > 0) & (deals['Offer Total Amount'] > 0)]
bins_initial = [0, 1000, 2000, 5000, 8000, 12000]
labels_initial = ['1-1000', '1001-2000', '2001-5000', '5001-8000', '8001-11440' ]

bins_offer = [0, 3000, 4000, 5000, 10000, 12000]
labels_offer = ['1-3000', '3001-4000', '4001-5000', '5001-10000', '10001-12000']

filtered_deals['Initial Group'] = pd.cut(filtered_deals['Initial Amount Paid'], bins=bins_initial, labels=labels_initial)
filtered_deals['Offer Group'] = pd.cut(filtered_deals['Offer Total Amount'], bins=bins_offer, labels=labels_offer)
filtered_deals.head()

filtered_deals['Initial Amount Paid'] == 0

group_means = filtered_deals[filtered_deals['Months of study'] != 0].groupby(['Initial Group', 'Offer Group'])['Months of study'].mean().reset_index()

deals['Initial Group'] = pd.cut(deals['Initial Amount Paid'], bins=bins_initial, labels=labels_initial)
deals['Offer Group'] = pd.cut(deals['Offer Total Amount'], bins=bins_offer, labels=labels_offer)

deals = deals.merge(group_means, on=['Initial Group', 'Offer Group'], how='left', suffixes=('_deals', '_mean'))
deals.loc[
    (deals['Months of study_deals'] == 0) & (deals['Initial Amount Paid'] > 0) & (deals['Offer Total Amount'] > 0), 'Months of study_deals'] = deals.loc[
    (deals['Months of study_deals'] == 0) & (deals['Initial Amount Paid'] > 0) & (deals['Offer Total Amount'] > 0), 'Months of study_mean']

deals.drop(columns=['Initial Group', 'Offer Group', 'Months of study_mean'], inplace=True)

deals.head()

"""# ЗАМЕНА НЕКОРРЕКТНОГО LOST , ГДЕ ПРОШЛА ОПЛАТА НА PAYMENT *DONE*"""

deals.loc[deals['Initial Amount Paid'] > 0, 'Stage'] = 'Payment Done'
deals.loc[deals['Initial Amount Paid'] > 0, 'Lost Reason'] = 'No reason'

"""# **УНИЧТОЖАЮ НЕНУЖНЫЕ СТОЛБЦЫ**"""

deals = deals.drop(columns=['Content'])
deals = deals.drop(columns=['Page'])
deals = deals.drop(columns=['Term'])
deals.head()

duration1 = deals[deals['Course duration'] == 1]
duration1
duration2 = deals[deals['Course duration'] == 4]
duration2
#замена 1 на 11 - Тотал эмаунт больше 11000, 4 на 6 низкий инитиал и оффер
deals['Course duration'] = deals['Course duration'].replace(1, 11)
deals['Course duration'] = deals['Course duration'].replace(4, 6)

"""**РАССЧЕТ СВОДНОЙ СТАТИСТИКИ ДЛЯ ОПЛАТ**"""

deals['Initial Amount Paid'] = deals['Initial Amount Paid'].replace(0, np.nan)

deals['Offer Total Amount'] = deals['Offer Total Amount'].replace(0, np.nan)

Mean_Init = deals['Initial Amount Paid'].mean()
Min_Init = deals['Initial Amount Paid'].min()
Max_Init = deals['Initial Amount Paid'].max()
std_Init = deals['Initial Amount Paid'].std()
print('Initial Amount' + ':\n')
print("Min:", Min_Init)
print("Max:", Max_Init)
print("STD:", std_Init)
print("Mean:", Mean_Init)
print("Median:", deals['Initial Amount Paid'].median())

Mean_Offer = deals['Offer Total Amount'].mean()
Min_Offer = deals['Offer Total Amount'].min()
Max_Offer = deals['Offer Total Amount'].max()
std_Offer = deals['Offer Total Amount'].std()
deals['Offer Total Amount'].median()
print('Offer' + ':\n')
print("Min:", Min_Offer)
print("Max:", Max_Offer)
print("STD:", std_Offer)
print("Mean:", Mean_Offer)
print("Median:", deals['Offer Total Amount'].median())

deals['Course duration'] = pd.to_numeric(deals['Course duration'], errors='coerce') # была замечена ячейка с менеджером Ulysses Adams вместо кол-венного значения. заменено на 11
deals['Course duration'] = deals['Course duration'].replace({'Ulysses Adams': '11'})
deals['Course duration'].astype(int)
quest = deals.loc[deals['Course duration'] == 'Ulysses Adams'].index

deals['Course duration'] = pd.to_numeric(deals['Course duration'], errors='coerce')
invalid_rows = deals[deals['Course duration'].isna()]
invalid_rows

print('Course duration' + ':\n')
print("Min:", deals[deals['Course duration'] != 0]['Course duration'].min())
print("Max:", deals[deals['Course duration'] != 0]['Course duration'].max())
print("STD:", deals[deals['Course duration'] != 0]['Course duration'].std())
print("Mean:", deals[deals['Course duration'] != 0]['Course duration'].mean())
print("Median:", deals[deals['Course duration'] != 0]['Course duration'].median())

print('Months of study_deals' + ':\n')
print("Min:", deals[deals['Months of study_deals'] != 0]['Months of study_deals'].min())
print("Max:", deals[deals['Months of study_deals'] != 0]['Months of study_deals'].max())
print("STD:", deals[deals['Months of study_deals'] != 0]['Months of study_deals'].std())
print("Mean:", deals[deals['Months of study_deals'] != 0]['Months of study_deals'].mean())
print("Median:", deals[deals['Months of study_deals'] != 0]['Months of study_deals'].median())

plt.hist(deals['Initial Amount Paid'], bins=30)
plt.xlabel('Initial Amount Paid')
plt.ylabel('Частота')
plt.title('Распределение первичного платежа Initial Amount Paid')
plt.show()

"""было около 2700 сделок, где начальная сумма платежа находилась в диапазоне 1500"""

plt.hist(deals['Offer Total Amount'], bins=30)
plt.xlabel('Offer Total Amount')
plt.ylabel('Частота')
plt.title('Распределение общей стоимости курса Offer Total Amount')
plt.show()

"""Более 1750 сделок составили стоимость 11000"""

deals.describe()

deals.describe().T

"""**CLOSING DATE В 2022 ГОДУ - ОШИБКА ВВОДА ДАННЫХ. ЗАМЕНЮ НА 2023, учитывая, что Created Time 3 октября 2023 и сделка потеряна**"""

deals.loc[deals['Closing Date'] == '2022-10-11', 'Closing Date'] = '2023-10-11'

SD_Initial = deals['Initial Amount Paid'].max() - deals['Initial Amount Paid'].min()
SD_Offer = deals['Offer Total Amount'].max() - deals['Offer Total Amount'].min()
print(SD_Initial, SD_Offer)

"""# **ОДНОМЕРНЫЙ АНАЛИЗ **"""

cat_cols = deals.select_dtypes(include=['category']).columns.tolist()
num_cols = deals.select_dtypes(include=np.number).columns.tolist()
print("Categorical Variables:")
print(cat_cols)
print("Numerical Variables:")
print(num_cols)

for col in num_cols:
    print(col)
    plt.figure(figsize = (8, 3))
    plt.subplot(1, 2, 1)
    deals[col].hist(grid=False)
    plt.ylabel('count')
    plt.subplot(1, 2, 2)
    sns.boxplot(x=deals[col])
    plt.show()

fig, axes = plt.subplots(3, 2, figsize=(12, 20))

for i in range(len(cat_cols)):
    row = i // 2  # Индекс строки
    col = i % 2   # Индекс столбца
    sns.countplot(ax=axes[row, col], x=cat_cols[i], data=deals, color='blue')
    axes[row, col].tick_params(axis='x', rotation=90)
    axes[row, col].tick_params(axis='y', rotation=0)

# Настройка поворота меток для осей
axes[0][0].tick_params(labelrotation=90)
axes[1][1].tick_params(labelrotation=90)
axes[2][0].tick_params(labelrotation=90)
axes[2][1].tick_params(labelrotation=90)
# axes[3][0].tick_params(labelrotation=90)

# Отображение графиков
plt.tight_layout()
plt.show()

"""# **ДВУМЕРНЫЙ АНАЛИЗ**"""

plt.figure(figsize=(13,17))

sns.pairplot(deals[['SLA', 'Course duration', 'Months of study_deals', 'Initial Amount Paid', 'Offer Total Amount']])
plt.show()

"""# **МНОГОМЕРНЫЙ АНАЛИЗ**"""

plt.figure()
sns.heatmap(deals[['SLA', 'Course duration', 'Months of study_deals', 'Initial Amount Paid', 'Offer Total Amount']].corr(), annot = True)
plt.show()

deals.info()

column_types = {}


for column in deals.columns:
    column_types[column] = str(deals[column].dtype)
for column in deals.select_dtypes(include='category').columns:
    deals[column] = deals[column].astype(str)
    column_types[column] = 'str'

for column in deals.select_dtypes(include='Int64').columns:
    deals[column] = deals[column].astype(str)
    column_types[column] = 'str'

deals.to_excel('Updated_Deals.xlsx', index=False)

for column, dtype in column_types.items():
    if dtype == 'category':
        deals[column] = deals[column].astype('category')
    elif dtype == 'Int64':
        deals[column] = deals[column].astype('Int64')

deals_updated = pd.read_excel('Updated_Deals.xlsx')
deals_updated

# from google.colab import sheets
# sheet = sheets.InteractiveSheet(df=deals_updated)